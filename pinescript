// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © zaikaman123

//@version=5
strategy("Price Action", overlay=true, margin_long=100, margin_short=100)

// SUPERTREND cho khung 240
i_tf_supertrend_240 = input.timeframe("120", title="Supertrend Timeframe 240")

// Cài đặt các biến và tính toán Supertrend cho khung 240
changeATR_240 = input(title='Change ATR Calculation Method (240)?', defval=true)
Periods_240 = input(title='ATR Period (240)', defval=10)
Multiplier_240 = input.float(title='ATR Multiplier (240)', step=0.1, defval=3.0)

src_supertrend_240 = request.security(syminfo.tickerid, i_tf_supertrend_240, hl2)
atr_supertrend_240 = request.security(syminfo.tickerid, i_tf_supertrend_240, changeATR_240 ? ta.atr(Periods_240) : ta.sma(ta.tr, Periods_240))

up_supertrend_240 = src_supertrend_240 - Multiplier_240 * atr_supertrend_240
up1_supertrend_240 = nz(up_supertrend_240[1], up_supertrend_240)
up_supertrend_240 := close[1] > up1_supertrend_240 ? math.max(up_supertrend_240, up1_supertrend_240) : up_supertrend_240

dn_supertrend_240 = src_supertrend_240 + Multiplier_240 * atr_supertrend_240
dn1_supertrend_240 = nz(dn_supertrend_240[1], dn_supertrend_240)
dn_supertrend_240 := close[1] < dn1_supertrend_240 ? math.min(dn_supertrend_240, dn1_supertrend_240) : dn_supertrend_240

trend_supertrend_240 = 1
trend_supertrend_240 := nz(trend_supertrend_240[1], trend_supertrend_240)
trend_supertrend_240 := trend_supertrend_240 == -1 and close > dn1_supertrend_240 ? 1 : trend_supertrend_240 == 1 and close < up1_supertrend_240 ? -1 : trend_supertrend_240

// Plot Supertrend cho khung 240
plot(trend_supertrend_240 == 1 ? up_supertrend_240 : na, title='Up Trend 240', style=plot.style_linebr, linewidth=2, color=color.new(color.green, 0))
plot(trend_supertrend_240 == 1 ? na : dn_supertrend_240, title='Down Trend 240', style=plot.style_linebr, linewidth=2, color=color.new(color.red, 0))


/// SUPERTREND cho khung 15
i_tf_supertrend_15 = input.timeframe("15", title="Supertrend Timeframe 15")

// Cài đặt các biến và tính toán Supertrend cho khung 15
changeATR_15 = input(title='Change ATR Calculation Method (15)?', defval=true)
Periods_15 = input(title='ATR Period (15)', defval=10)
Multiplier_15 = input.float(title='ATR Multiplier (15)', step=0.1, defval=3.0)

src_supertrend_15 = request.security(syminfo.tickerid, i_tf_supertrend_15, hl2)
atr_supertrend_15 = request.security(syminfo.tickerid, i_tf_supertrend_15, changeATR_15 ? ta.atr(Periods_15) : ta.sma(ta.tr, Periods_15))

up_supertrend_15 = src_supertrend_15 - Multiplier_15 * atr_supertrend_15
up1_supertrend_15 = nz(up_supertrend_15[1], up_supertrend_15)
up_supertrend_15 := close[1] > up1_supertrend_15 ? math.max(up_supertrend_15, up1_supertrend_15) : up_supertrend_15

dn_supertrend_15 = src_supertrend_15 + Multiplier_15 * atr_supertrend_15
dn1_supertrend_15 = nz(dn_supertrend_15[1], dn_supertrend_15)
dn_supertrend_15 := close[1] < dn1_supertrend_15 ? math.min(dn_supertrend_15, dn1_supertrend_15) : dn_supertrend_15

trend_supertrend_15 = 1
trend_supertrend_15 := nz(trend_supertrend_15[1], trend_supertrend_15)
trend_supertrend_15 := trend_supertrend_15 == -1 and close > dn1_supertrend_15 ? 1 : trend_supertrend_15 == 1 and close < up1_supertrend_15 ? -1 : trend_supertrend_15

// Tạo biến tín hiệu mua và bán
buySignal = trend_supertrend_15 == 1 and trend_supertrend_15[1] == -1
sellSignal = trend_supertrend_15 == -1 and trend_supertrend_15[1] == 1

// Plot Supertrend cho khung 15
plot(trend_supertrend_15 == 1 ? up_supertrend_15 : na, title='Up Trend 15', style=plot.style_linebr, linewidth=2, color=color.new(color.blue, 0))
plot(trend_supertrend_15 == 1 ? na : dn_supertrend_15, title='Down Trend 15', style=plot.style_linebr, linewidth=2, color=color.new(color.orange, 0))

// // SUPERTREND cho khung 1H
// i_tf_supertrend_1H = input.timeframe("60", title="Supertrend Timeframe 1H")

// // Cài đặt các biến và tính toán Supertrend cho khung 1H
// changeATR_1H = input(title='Change ATR Calculation Method (1H)?', defval=true)
// Periods_1H = input(title='ATR Period (1H)', defval=10)
// Multiplier_1H = input.float(title='ATR Multiplier (1H)', step=0.1, defval=3.0)

// src_supertrend_1H = request.security(syminfo.tickerid, i_tf_supertrend_1H, hl2)
// atr_supertrend_1H = request.security(syminfo.tickerid, i_tf_supertrend_1H, changeATR_1H ? ta.atr(Periods_1H) : ta.sma(ta.tr, Periods_1H))

// up_supertrend_1H = src_supertrend_1H - Multiplier_1H * atr_supertrend_1H
// up1_supertrend_1H = nz(up_supertrend_1H[1], up_supertrend_1H)
// up_supertrend_1H := close[1] > up1_supertrend_1H ? math.max(up_supertrend_1H, up1_supertrend_1H) : up_supertrend_1H

// dn_supertrend_1H = src_supertrend_1H + Multiplier_1H * atr_supertrend_1H
// dn1_supertrend_1H = nz(dn_supertrend_1H[1], dn_supertrend_1H)
// dn_supertrend_1H := close[1] < dn1_supertrend_1H ? math.min(dn_supertrend_1H, dn1_supertrend_1H) : dn_supertrend_1H

// trend_supertrend_1H = 1
// trend_supertrend_1H := nz(trend_supertrend_1H[1], trend_supertrend_1H)
// trend_supertrend_1H := trend_supertrend_1H == -1 and close > dn1_supertrend_1H ? 1 : trend_supertrend_1H == 1 and close < up1_supertrend_1H ? -1 : trend_supertrend_1H

// // Plot Supertrend cho khung 1H
// plot(trend_supertrend_1H == 1 ? up_supertrend_1H : na, title='Up Trend 1H', style=plot.style_linebr, linewidth=2, color=color.new(color.purple, 0))
// plot(trend_supertrend_1H == 1 ? na : dn_supertrend_1H, title='Down Trend 1H', style=plot.style_linebr, linewidth=2, color=color.new(color.yellow, 0))

// SUPPORT AND RESISTANCE

prd = input.int(defval=10, title='Pivot Period', minval=4, maxval=30, group='Settings 🔨', tooltip='Used while calculating Pivot Points, checks left&right bars')
ppsrc = input.string(defval='High/Low', title='Source', options=['High/Low', 'Close/Open'], group='Settings 🔨', tooltip='Source for Pivot Points')
ChannelW = input.int(defval=1, title='Maximum Channel Width %', minval=1, maxval=8, group='Settings 🔨', tooltip='Calculated using Highest/Lowest levels in 300 bars')
minstrength = input.int(defval=1, title='Minimum Strength', minval=1, group='Settings 🔨', tooltip='Channel must contain at least 2 Pivot Points')
maxnumsr = input.int(defval=2, title='Maximum Number of S/R', minval=1, maxval=2, group='Settings 🔨', tooltip='Maximum number of Support/Resistance Channels to Show') - 1
loopback = input.int(defval=290, title='Loopback Period', minval=100, maxval=400, group='Settings 🔨', tooltip='While calculating S/R levels it checks Pivots in Loopback Period')
res_col = input.color(defval=color.new(color.red, 75), title='Resistance Color', group='Colors 🟡🟢🟣')
sup_col = input.color(defval=color.new(color.lime, 75), title='Support Color', group='Colors 🟡🟢🟣')
inch_col = input.color(defval=color.new(color.gray, 75), title='Color When Price in Channel', group='Colors 🟡🟢🟣')
showpp = input.bool(defval=false, title='Show Pivot Points', group='Extras ⏶⏷')
showsrbroken = input.bool(defval=false, title='Show Broken Support/Resistance', group='Extras ⏶⏷')
showthema1en = input.bool(defval=false, title='MA 1', inline='ma1')
showthema1len = input.int(defval=50, title='', inline='ma1')
showthema1type = input.string(defval='SMA', title='', options=['SMA', 'EMA'], inline='ma1')
showthema2en = input.bool(defval=false, title='MA 2', inline='ma2')
showthema2len = input.int(defval=200, title='', inline='ma2')
showthema2type = input.string(defval='SMA', title='', options=['SMA', 'EMA'], inline='ma2')

ma1 = showthema1en ? showthema1type == 'SMA' ? ta.sma(close, showthema1len) : ta.ema(close, showthema1len) : na
ma2 = showthema2en ? showthema2type == 'SMA' ? ta.sma(close, showthema2len) : ta.ema(close, showthema2len) : na

plot(ma1, color=not na(ma1) ? color.blue : na)
plot(ma2, color=not na(ma2) ? color.red : na)

// get Pivot High/low
float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd)

// draw Pivot points
plotshape(ph and showpp, text='H', style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl and showpp, text='L', style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

//calculate maximum S/R channel width
prdhighest = ta.highest(300)
prdlowest = ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

// get/keep Pivot levels
var pivotvals = array.new_float(0)
var pivotlocs = array.new_float(0)
if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0 by 1
        if bar_index - array.get(pivotlocs, x) > loopback  // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

//find/create SR channel of a pivot point
get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth  // fits the max channel width?
            if cpp <= hi
                lo := math.min(lo, cpp)
                lo
            else
                hi := math.max(hi, cpp)
                hi

            numpp += 20  // each pivot point added as 20
            numpp
    [hi, lo, numpp]

// keep old SR channels and calculate/sort new channels if we met new pivot point
var suportresistance = array.new_float(20, 0)  // min/max levels
changeit(x, y) =>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)

if ph or pl
    supres = array.new_float(0)  // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // get levels and strengs
    for x = 0 to array.size(pivotvals) - 1 by 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)

    // add each HL to strengh
    for x = 0 to array.size(pivotvals) - 1 by 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback by 1
            if high[y] <= h and high[y] >= l or low[y] <= h and low[y] >= l
                s += 1
                s
        array.set(supres, x * 3, array.get(supres, x * 3) + s)

    //reset SR levels
    array.fill(suportresistance, 0)
    // get strongest SRs
    src = 0
    for x = 0 to array.size(pivotvals) - 1 by 1
        stv = -1.  // value
        stl = -1  // location
        for y = 0 to array.size(pivotvals) - 1 by 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
                stl
        if stl >= 0
            //get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, src * 2, hh)
            array.set(suportresistance, src * 2 + 1, ll)
            array.set(stren, src, array.get(supres, stl * 3))

            // make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1 by 1
                if array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll or array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll
                    array.set(supres, y * 3, -1)

            src += 1
            if src >= 10
                break

    for x = 0 to 8 by 1
        for y = x + 1 to 9 by 1
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y)
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)


get_level(ind) =>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
            ret
    ret

get_color(ind) =>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col : array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col : inch_col
            ret
    ret

var srchannels = array.new_box(10)
for x = 0 to math.min(9, maxnumsr) by 1
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, box.new(left=bar_index, top=get_level(x * 2), right=bar_index + 1, bottom=get_level(x * 2 + 1), border_color=srcol, border_width=1, extend=extend.both, bgcolor=srcol))

resistancebroken = false
supportbroken = false

// check if it's not in a channel
not_in_a_channel = true
for x = 0 to math.min(9, maxnumsr) by 1
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1)
        not_in_a_channel := false
        not_in_a_channel

// if price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to math.min(9, maxnumsr) by 1
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
            resistancebroken
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true
            supportbroken

alertcondition(resistancebroken, title='Resistance Broken', message='Resistance Broken')
alertcondition(supportbroken, title='Support Broken', message='Support Broken')
plotshape(showsrbroken and resistancebroken, style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), size=size.tiny)
plotshape(showsrbroken and supportbroken, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.tiny)

// FUNCTIONS
// Check if any significant support/resistance levels exist between entry and take-profit
is_clear_path(entry_price, take_profit_price) =>
    no_obstacle = true
    for x = 0 to math.min(9, maxnumsr) by 1
        level = get_level(x * 2)
        level_low = get_level(x * 2 + 1)
        // Check if a resistance level is between entry and take-profit for long positions
        if entry_price < take_profit_price and level > entry_price and level < take_profit_price
            no_obstacle := false
            break
        // Check if a support level is between entry and take-profit for short positions
        if entry_price > take_profit_price and level_low < entry_price and level_low > take_profit_price
            no_obstacle := false
            break
    no_obstacle

// ĐẶT LỆNH

// Risk management parameters
balance = input.float(1000.0, title="Account Balance")  // Default balance of $1000
riskPercent = input.float(1.0, title="Risk Percent", minval=0.01, maxval=100)  // Default risk of 1%

// Parameters
riskAmount = strategy.equity * (riskPercent / 100)  // Risk amount based on current equity
minStopLossDistance = close * 0.001  // Set a minimum stop-loss distance (0.1% of the price) to avoid very tight stop-losses

// Điểm dừng lỗ cho long và short
longStopLoss = up_supertrend_240 
shortStopLoss = dn_supertrend_240

// Calculate the distance for stop-loss, ensuring it's at least the minimum stop-loss distance
longStopLossDistance = math.max(close - longStopLoss, minStopLossDistance)
shortStopLossDistance = math.max(shortStopLoss - close, minStopLossDistance)

// Calculate position size (qty) based on the risk amount and stop-loss distance
longQty = riskAmount / longStopLossDistance  // Qty for long trade
shortQty = riskAmount / shortStopLossDistance  // Qty for short trade

// Calculate long and short take-profit targets first
longTakeProfitTarget = close + 3 * (close - longStopLoss)
shortTakeProfitTarget = close - 3 * (shortStopLoss - close)

// Tính toán mức Take Profit với tỷ lệ R:R là 1:3
var float longTakeProfit = na
var float shortTakeProfit = na

// Long condition: Supertrend trend alignment, recent support touch, and no obstacles to target
long_condition = (buySignal and trend_supertrend_240 == 1) and
                 ((get_level(0) - low) / get_level(0) <= 0.025) and
                 is_clear_path(close, longTakeProfitTarget)

// Short condition: Supertrend trend alignment, recent resistance touch, and no obstacles to target
short_condition = (sellSignal and trend_supertrend_240 == -1) and
                  ((high - get_level(1)) / get_level(1) <= 0.025) and
                  is_clear_path(close, shortTakeProfitTarget)

// Execute long if conditions met
if (long_condition)
    longTakeProfit := longTakeProfitTarget
    strategy.entry("Long", strategy.long, stop=longStopLoss, qty=longQty)
    strategy.exit("Long Closed", from_entry="Long", limit=longTakeProfit, stop=longStopLoss)

// Execute short if conditions met
if (short_condition)
    shortTakeProfit := shortTakeProfitTarget
    strategy.entry("Short", strategy.short, stop=shortStopLoss, qty=shortQty)
    strategy.exit("Short Closed", from_entry="Short", limit=shortTakeProfit, stop=shortStopLoss)
